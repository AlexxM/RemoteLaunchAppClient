//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteLaunchAppClient.ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemouteLaunchAppClient.RemoteLaunchAppClient.IRemoteLaunchAppService", CallbackContract=typeof(RemoteLaunchAppClient.ServiceReference.IRemoteLaunchAppServiceCallback))]
    public interface IRemoteLaunchAppService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLaunchAppService/SubscribeRecieved", ReplyAction="http://tempuri.org/IRemoteLaunchAppService/SubscribeRecievedResponse")]
        void SubscribeRecieved();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLaunchAppService/LaunchProg", ReplyAction="http://tempuri.org/IRemoteLaunchAppService/LaunchProgResponse")]
        void LaunchProg(string command, string args, System.TimeSpan processLifeTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLaunchAppService/SendMessage", ReplyAction="http://tempuri.org/IRemoteLaunchAppService/SendMessageResponse")]
        void SendMessage(string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLaunchAppService/CloseProg", ReplyAction="http://tempuri.org/IRemoteLaunchAppService/CloseProgResponse")]
        void CloseProg();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteLaunchAppServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteLaunchAppService/RecievedData")]
        void RecievedData(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteLaunchAppServiceChannel : RemoteLaunchAppClient.ServiceReference.IRemoteLaunchAppService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteLaunchAppServiceClient : System.ServiceModel.DuplexClientBase<RemoteLaunchAppClient.ServiceReference.IRemoteLaunchAppService>, RemoteLaunchAppClient.ServiceReference.IRemoteLaunchAppService
    {
        
        public RemoteLaunchAppServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance)
        {
        }
        
        public RemoteLaunchAppServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName)
        {
        }
        
        public RemoteLaunchAppServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public RemoteLaunchAppServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public RemoteLaunchAppServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public void SubscribeRecieved()
        {
            base.Channel.SubscribeRecieved();
        }
        
        public void LaunchProg(string command, string args, System.TimeSpan processLifeTime)
        {
            base.Channel.LaunchProg(command, args, processLifeTime);
        }
        
        public void SendMessage(string command)
        {
            base.Channel.SendMessage(command);
        }
        
        public void CloseProg()
        {
            base.Channel.CloseProg();
        }
    }
}
